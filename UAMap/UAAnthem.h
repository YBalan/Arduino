#pragma once
#ifndef UA_ANTHEM_H
#define UA_ANTHEM_H

#include "BuzzHelper.h"

#define UA_ANTHEM_FULL F("659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 659,500, 494,500, 659,500, 440,250, 415,250, 440,250, 494,250, 523,500, 587,500, 659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 440,500, 659,500, 415,500, 440,1000, 440,500, 0,500, 494,750, 494,250, 659,250, 587,250, 523,250, 494,250, 440,250, 494,250, 523,250, 440,250, 494,500, 494,500, 523,500, 523,500, 587,500, 587,500, 659,1000, 659,500, 0,500, 494,750, 494,250, 659,250, 587,250, 523,250, 494,250, 440,250, 494,250, 523,250, 440,250, 494,500, 494,500, 523,500, 659,500, 494,500, 659,500, 440,250, 494,250, 523,250, 587,250, 659,500, 698,500, 784,750, 740,250, 784,500, 659,500, 587,500, 587,500, 784,250, 698,250, 659,250, 587,250, 523,500, 523,500, 587,500, 587,500, 659,750, 587,250, 523,250, 587,250, 659,250, 698,250, 784,750, 740,250, 784,500, 659,500, 587,500, 587,500, 784,250, 698,250, 659,250, 587,250, 523,500, 440,500, 659,500, 415,500, 440,1000, 440,500, 0,500, 784,750, 740,250, 784,500, 659,500, 587,500, 587,500, 784,250, 698,250, 659,250, 587,250, 523,500, 523,500, 587,500, 587,500, 659,750, 587,250, 523,250, 587,250, 659,250, 698,250, 784,750, 740,250, 784,500, 659,500, 587,500, 587,500, 784,250, 698,250, 659,250, 587,250, 523,500, 440,500, 659,500, 415,500, 440,1000, 440,500, 0,500, 0,0,")
#define UA_ANTHEM_HALF F("659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 659,500, 494,500, 659,500, 440,250, 415,250, 440,250, 494,250, 523,500, 587,500, 659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 440,500, 659,500, 415,500, 440,1000, 440,500, 0,500, 494,750, 494,250, 659,250, 587,250, 523,250, 494,250, 440,250, 494,250, 523,250, 440,250, 494,500, 494,500, 523,500, 523,500, 587,500, 587,500, 659,1000")
#define UA_ANTHEM_SMALL F("659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 659,500, 494,500, 659,500, 440,250, 415,250, 440,250, 494,250, 523,500, 587,500, 659,750, 659,250, 659,250, 587,250, 659,250, 698,250, 784,750, 698,250, 659,500, 587,500, 523,500, 440,500, 659,500, 415,500, 440,1000")

namespace UAAnthem
{    
    //https://www.instructables.com/Translate-Songs-to-Be-Played-on-Arduino/
    // static const constexpr int melody[] = { 
    // 659, 659, 659, 587, 659, 698, 784, 698, 659, 587, 523, 659, 494, 659, 440, 415, 440, 494, 523, 587, 659, 659, 659, 587, 659, 698, 784, 698, 659, 587, 523, 440, 659, 415, 440, 440, 0, 494, 494, 659, 587, 523, 494, 440, 494, 523, 440, 494, 494, 523, 523, 587, 587, 659, 659, 0, 494, 494, 659, 587, 523, 494, 440, 494, 523, 440, 494, 494, 523, 659, 494, 659, 440, 494, 523, 587, 659, 698, 784, 740, 784, 659, 587, 587, 784, 698, 659, 587, 523, 523, 587, 587, 659, 587, 523, 587, 659, 698, 784, 740, 784, 659, 587, 587, 784, 698, 659, 587, 523, 440, 659, 415, 440, 440, 0, 784, 740, 784, 659, 587, 587, 784, 698, 659, 587, 523, 523, 587, 587, 659, 587, 523, 587, 659, 698, 784, 740, 784, 659, 587, 587, 784, 698, 659, 587, 523, 440, 659, 415, 440, 440, 0, 0 
    // };
    // static const constexpr int  noteDurations[] = { 
    // 750, 250, 250, 250, 250, 250, 750, 250, 500, 500, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 750, 250, 250, 250, 250, 250, 750, 250, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 750, 250, 250, 250, 250, 250, 250, 250, 250, 250, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 750, 250, 250, 250, 250, 250, 250, 250, 250, 250, 500, 500, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 750, 250, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 500, 500, 750, 250, 250, 250, 250, 250, 750, 250, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 500, 500, 1000, 500, 500, 750, 250, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 500, 500, 750, 250, 250, 250, 250, 250, 750, 250, 500, 500, 500, 500, 250, 250, 250, 250, 500, 500, 500, 500, 1000, 500, 500, 0 
    // };

    // String play() {
    //   String res;
    //   for (int thisNote = 0; thisNote < sizeof(melody) / sizeof(int); thisNote++)
    //   {    
    //     tone(D3, melody[thisNote], noteDurations[thisNote]);    
    //     res += String(melody[thisNote])+F(",")+String(noteDurations[thisNote])+F(", ");
    //     delay(noteDurations[thisNote] * 1.2);    
    //     noTone(D3);
    //   }

    //   return res;
    // }   

    //0 - small, 1 - Half, 2 - full
    int play(const uint8_t &pin, const uint8_t &type = 0) 
    {
      switch(type)
      {
        #ifdef ESP32
          case 1:
            return Buzz::PlayMelody(pin, UA_ANTHEM_HALF);
          break;
          case 2:
            return Buzz::PlayMelody(pin, UA_ANTHEM_FULL);
          break;
        #endif
        case 0:
        default:
          return Buzz::PlayMelody(pin, UA_ANTHEM_SMALL);
        break;
      }
    }
};
#endif //UA_ANTHEM_H